# Common setup for generic Makefiles
ifndef generic_common_gmk
generic_common_gmk=1

# Paths and generic targets (clean, install)

include generic.paths.gmk

.PHONY: default clean install install_prepare
.DEFAULT_GOAL:=default

clean:
	rm -rf $(OBJDIR)
	@-rm -rf ${BINDIR} 2> /dev/null || true
	@-rm -rf ${LIBDIR} 2> /dev/null || true

ifeq ($(abspath $(MAKEOBJDIR)),$(abspath $(PREFIX)))
install_prepare:
	@echo "MAKEOBJDIR and PREFIX refer to same location; nothing to install"; exit 1
else
install_prepare:
	@mkdir -p $(DESTDIR)/$(PREFIX)
	@[ ! -z $(DESTDIR)/$(PREFIX) ] && [ -d $(DESTDIR)/$(PREFIX) ] || \
(echo "Error: destdir/prefix "$(DESTDIR)/$(PREFIX)" does not exist"; exit 1)
	@mkdir -p $(DESTDIR)/$(PREFIX)/include
	@mkdir -p $(DESTDIR)/$(PREFIX)/lib
	@mkdir -p $(DESTDIR)/$(PREFIX)/bin
endif

endif

# Variables and rules for each C/C++ package built

ifeq ($(name),)
$(error "Must set $$(name) before including generic")
endif

# CPPFLAGS: preprocessor
genCPPFLAGS=$(CPPFLAGS) $(cppflags) $($(name)_cppflags)
# CCFLAGS: flags for both C compiler and C++ compiler
genCCFLAGS=$(CCFLAGS) $(ccflags) $($(name)_ccflags)
# CFLAGS: C compiler
genCFLAGS=$(CFLAGS) $(cflags) $($(name)_cflags)
# CXXFLAGS: C++ compiler
genCXXFLAGS=$(CXXFLAGS) $(cxxflags) $($(name)_cxxflags)
# LDFLAGS: linker
genLDFLAGS=$(LDFLAGS) $(ldflags) $($(name)_ldflags)

# If $(dir) is defined, look inside it for sources and headers
include?=include
src?=.
#genCPPFLAGS:=$(genCPPFLAGS) -I$(include)
genCPPFLAGS+=-I$(include)
ifneq ($(dir),)
include:=$(include)/$(dir)
#genCPPFLAGS:=$(genCPPFLAGS) -I$(include)
genCPPFLAGS+=-I$(include)
src:=$(src)/$(dir)
endif

# Tell runtime to look in $(PREFIX) for libraries
genLDFLAGS+=-Wl,-rpath=$(PREFIX)/lib

# Generate dependency lists included by this Makefile
genCPPFLAGS+=-MMD

# Let one project include a library generated by another
genLDFLAGS+=-L$(LIBDIR)

# C/C++ object recipes
# Need to use define/eval to force expansion of variables
define rules :=

$(patsubst %, $(OBJDIR)/%.o, $(sources_c) $(sources_cxx)): ${pkg_incdirs}

#$(patsubst %, $(OBJDIR)/%.o, $(sources_c)): ${depends_targets}
$(patsubst %, $(OBJDIR)/%.o, $(sources_c)): $(OBJDIR)/%.o : $(src)/%
	@mkdir -p $$(dir $$@)
	@echo '  'CC'  ' $$<
	@$(CC) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCFLAGS) -c $$< || (echo cmdline: $(CC) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCFLAGS) -c $$< && exit 1)

#$(patsubst %, $(OBJDIR)/%.o, $(sources_cxx)): ${depends_targets}
$(patsubst %, $(OBJDIR)/%.o, $(sources_cxx)): $(OBJDIR)/%.o : $(src)/%
	@mkdir -p $$(dir $$@)
	@echo '  'CXX'  ' $$<
	@$(CXX) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCXXFLAGS) -c $$< || (echo cmdline: $(CXX) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCXXFLAGS) -c $$< && exit 1)

install_$(name): install_prepare build_$(name)

.PHONY: build_$(name) install_$(name)
install: install_$(name)
default: build_$(name)

endef
$(eval $(rules))

build_$(name): $($(name)_products)

-include $(patsubst %, $(OBJDIR)/%.d, $(sources_c) $(sources_cxx))
