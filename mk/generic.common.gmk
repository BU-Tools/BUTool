# Common setup for generic Makefiles
ifndef generic_common_gmk
export generic_common_gmk=1

# Paths and generic targets (clean, install)

MAKEOBJDIR?=./build

OBJDIR?=$(MAKEOBJDIR)/obj

LIBDIR?=$(MAKEOBJDIR)/lib
BINDIR?=$(MAKEOBJDIR)/bin
INCDIR?=$(MAKEOBJDIR)/include

DESTDIR?=$(PREFIX)

.PHONY: default clean install install_prepare
.DEFAULT_GOAL:=default

clean:
	rm -rf $(MAKEOBJDIR)

ifeq ($(abspath $(MAKEOBJDIR)),$(abspath $(DESTDIR)))
install_prepare:
	@echo "MAKEOBJDIR and DESTDIR refer to same location; nothing to install"; exit 1
else
install_prepare:
	@[ ! -z $(DESTDIR) ] && [ -d $(DESTDIR) ] || \
(echo "Error: destdir does not exist"; exit 1)
	@mkdir -p $(DESTDIR)/include
	@mkdir -p $(DESTDIR)/lib
	@mkdir -p $(DESTDIR)/bin
endif

endif

# Variables and rules for each C/C++ package built

ifeq ($(name),)
$(error "Must set $(name) before including generic")
endif

# CPPFLAGS: preprocessor
genCPPFLAGS:=$(CPPFLAGS) $(cppflags)
# CCFLAGS: flags for both C compiler and C++ compiler
genCCFLAGS:=$(CCFLAGS) $(ccflags)
# CFLAGS: C compiler
genCFLAGS:=$(CFLAGS) $(cflags)
# CXXFLAGS: C++ compiler
genCXXFLAGS:=$(CXXFLAGS) $(cxxflags)
# LDFLAGS: linker
genLDFLAGS:=$(LDFLAGS) $(ldflags)

# If $(dir) is defined, look inside it for sources and headers
include?=include
src?=.
genCPPFLAGS:=$(genCPPFLAGS) -I$(include)
ifneq ($(dir),)
include:=$(include)/$(dir)
genCPPFLAGS:=$(genCPPFLAGS) -I$(include)
src:=$(src)/$(dir)
endif

# Tell runtime to look in $(PREFIX) for libraries
genLDFLAGS+=-Wl,-rpath=$(PREFIX)/lib

# Generate dependency lists included by this Makefile
genCPPFLAGS+=-MMD

# Let one project include a library generated by another
genLDFLAGS+=-L$(LIBDIR)

# C/C++ object recipes
# Need to use define/eval to force expansion of variables
define rules :=

$(patsubst %, $(OBJDIR)/%.o, $(sources_c)): $(OBJDIR)/%.o : $(src)/%
	@mkdir -p $$(dir $$@)
	$(CC) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCFLAGS) -c $$<

$(patsubst %, $(OBJDIR)/%.o, $(sources_cxx)): $(OBJDIR)/%.o : $(src)/%
	@mkdir -p $$(dir $$@)
	$(CXX) -o $$@ $(genCPPFLAGS) $(genCCFLAGS) $(genCXXFLAGS) -c $$<

install_$(name): install_prepare $(name)

.PHONY: $(name) install_$(name)
install: install_$(name)
default: $(name)

endef
$(eval $(rules))

$(name): $($(name)_products)

-include $(patsubst %, $(OBJDIR)/%.d, $(sources_c) $(sources_cxx))
