
ifndef PROJECT_ROOT
$(error Require PROJECT_ROOT)
endif

dependsfull=$(patsubst %, $(PROJECT_ROOT)/%, $(pkg_depends))

pkg_depends_targets=$(patsubst %, $(PROJECT_ROOT)/obj/.deptargets/%/.target, $(pkg_depends))
pkg_depends_targets_install=$(patsubst %, $(PROJECT_ROOT)/obj/.deptargets/%/.target_install, $(pkg_depends_install))
pkg_depends_targets_clean=$(patsubst %, $(PROJECT_ROOT)/obj/.deptargets/%/.target_clean, $(pkg_depends) $(pkg_depends_install))
# Add default dependency include paths to compiler flags
# Create include_{pkg_name} variables for include paths


showdepends:
	@echo ${depends_targets}

showLDFLAGS:
	@echo ${LDFLAGS}

#################################################################################
# depforeach macro
#################################################################################
define depforeach =
depname:=$(shell $(MAKE) -s pkg_name -C $(dep) | tail -n1)
depincpath:=$(shell $(MAKE) -s pkg_incpath -C $(dep) | tail -n1)
deplibpath:=$(shell $(MAKE) -s pkg_libpath -C $(dep) | tail -n1)

$$(eval pkg_include_$$(depname)=$$(depincpath))
$$(eval pkg_incdirs+=$$(depincpath))
$$(eval pkg_libdirs+=$$(deplibpath))

ifneq ($$(depincpath),)
$$(eval CPPFLAGS+=-isystem $$(depincpath))
endif
ifneq ($$(deplibpath),)
$$(eval LDFLAGS+=-L $$(deplibpath))
endif


$$(depincpath) $$(deplibpath): $(dep)
	$(MAKE) -C $(dep)

$$(depincpath)/%:
	$(MAKE) -C $(dep)

$$(deplibpath)/%:
	$(MAKE) -C $(dep)

#.PHONY: $$(depincpath)/% $$(deplibpath)/%

endef
#################################################################################


$(eval $(foreach dep,$(dependsfull),$(depforeach)))

#################################################################################
# C/C++ object recipes
# Need to use define/eval to force expansion of variables
#################################################################################
define rules :=

install: $(pkg_depends_targets_install)

# FIX ME
$(pkg_depends_targets): $(PROJECT_ROOT)/obj/.deptargets/%/.target: $(PROJECT_ROOT)/%
	$(MAKE) -C $$<
	#@mkdir -p $$(dir $$@)
	#@touch $$@

$(pkg_depends_targets_install): $(PROJECT_ROOT)/obj/.deptargets/%/.target_install: $(PROJECT_ROOT)/%
	$(MAKE) -C $$< install

$(pkg_depends_targets_clean): $(PROJECT_ROOT)/obj/.deptargets/%/.target_clean: $(PROJECT_ROOT)/%
	$(MAKE) -C $$< clean

cleandeps: $(pkg_depends_targets_clean)

.PHONY: $(pkg_depends_targets_install) $(pkg_depends_targets_clean)
.PHONY: $(pkg_depends_targets)

endef
#################################################################################

#geneerate rules from above
#$(info package.gmk $(rules))
$(eval $(rules))

pkg_libpath:
	@echo ${LIBDIR}

pkg_incpath:
	@echo ${INCDIR}

pkg_name:
	@echo ${pkg_name}
