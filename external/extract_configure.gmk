include objdir.gmk

.NOTPARALLEL:

${OBJDIR}/$(dir):
	@mkdir -p ${OBJDIR}
	rm -rf $@
	tar xf $(archive) -C ${OBJDIR}

extract: | ${OBJDIR}/$(dir)

${OBJDIR}/configure.success: | ${OBJDIR}/patch.success
	cd ${OBJDIR}/${dir} && ./configure --host=$(CROSS_HOST) --prefix=$(PREFIX)
	touch $@

configure: ${OBJDIR}/configure.success
build: ${OBJDIR}/build.success
patch: ${OBJDIR}/patch.success

patches=$(wildcard ${CURDIR}/patch/*)

$(patsubst patch/%.patch,${OBJDIR}/patch/%.applied,$(patches)): | extract

	patch -t -p0 -u -d ${OBJDIR}/${dir} -b < $(patsubst ${OBJDIR}/patch/%.applied,patch/%.patch,$@) || true
	@mkdir -p ${OBJDIR}/patch
	touch $@

${OBJDIR}/patch.success: | $(patsubst patch/%.patch,${OBJDIR}/patch/%.applied,$(patches)) extract
	@mkdir -p ${OBJDIR}
	touch $@

${OBJDIR}/build.success: | configure
	$(MAKE) -C ${OBJDIR}/${dir}
# Hack to strip prefix from where a DESTDIR-compliant script installs the
# product's development files
	mkdir -p ${OBJDIR}/dest/$(dir ${PREFIX})
	mkdir -p ${OBJDIR}/build
	ln -s ${OBJDIR}/build ${OBJDIR}/dest/${PREFIX}
	( cd ${OBJDIR}/$(dir) && $(MAKE) install DESTDIR=${OBJDIR}/dest || (rm ${OBJDIR}/dest/${PREFIX}; rm -rf ${OBJDIR}/dest; exit 1))
	rm ${OBJDIR}/dest/${PREFIX} && rm -rf ${OBJDIR}/dest
	touch $@
install: build
	cp -r ${OBJDIR}/build/lib/* ${DESTDIR}/${PREFIX}/lib/
clean:
	rm -rf ${OBJDIR}

.DEFAULT_GOAL:=build

include?=$(OBJDIR)/$(dir)/include
pkg_name?=$(notdir $(patsubst %/,%,$(CURDIR)))

INCDIR=${OBJDIR}/build/include

LIBDIR=${OBJDIR}/build/lib

include package.gmk

.PHONY: extract configure build install clean patch
